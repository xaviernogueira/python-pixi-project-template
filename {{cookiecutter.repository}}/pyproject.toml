# https://pixi.sh/dev/advanced/pyproject_toml/
[project]
name = "{{cookiecutter.repository}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.description}}"
repository = "https://github.com/{{cookiecutter.user}}/{{cookiecutter.repository}}"
documentation = "https://{{cookiecutter.user}}.github.io/{{cookiecutter.repository}}/"
authors = [{name = "{{cookiecutter.user}}", email = "{{cookiecutter.email}}"}]
readme = "README.md"
license = "{{cookiecutter.license}}"
packages = [{ include = "{{cookiecutter.package}}", from = "src" }]

# PyPI dependencies
dependencies = [
    "invoke",
]

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64", "osx-64"]

[tool.pixi.dependencies]
python = "{{cookiecutter.python_version}}"
hatch = "*"
loguru = "0.7.2"
bandit = "1.7.9"
coverage = "7.5.4"
mypy = "1.10.1"
pytest = "8.2.2"
pytest-cov = "5.0.0"
pytest-xdist = "3.6.1"
ruff = "0.5.0"
pre-commit = "3.7.1"
pdoc = ">=14.0.0"

[tool.pixi.tasks]
"{{cookiecutter.repository}}" = { cmd = "python -m {{cookiecutter.package}}.scripts" }
installs = { cmd = "invoke installs" }
checks = { cmd = "invoke checks", depends-on = ["installs"] }
cleans = { cmd = "invoke cleans", depends-on = ["installs"] }
containers = { cmd = "invoke containers", depends-on = ["installs"] }
docs = { cmd = "invoke docs", depends-on = ["installs"] }
formats = { cmd = "invoke formats", depends-on = ["installs"] }
packages = { cmd = "invoke packages", depends-on = ["installs"] }


# CONFIGURATIONS

[tool.bandit]
targets = ["src"]

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["__main__.py"]

[tool.mypy]
pretty = true
strict = true
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
disable_error_code = ["import-untyped", "misc"]

[tool.pytest.ini_options]
addopts = "--verbosity=2"
pythonpath = ["src"]

[tool.ruff]
fix = true
indent-width = 4
line-length = 100
target-version = "py312"
src = ["src"]

[tool.ruff.lint]
ignore = ["D100", "D103"]
extend-select = ["I"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]
